@ngdoc overview
@name Multi Language
@description

# Multi Language

In [Variable replacement](#/guide/06_variable-replacement) you've learned how to
pass dynamic values through the different components, to make use of them within
your translations. Since we've covered all the basic functionality these components
provide (using the default interpolation service), we are now ready to get to the
next level: **Multi Language Support**.

Of course, it's pretty cool to know how to use the components angular-translate
provides, but things are getting really interesting when it comes to teach your
apps more then just one language (which is actually what this module is for!).
So let's get started by learning how to add different translation tables add a time!

### Teaching your app more languages

In [Getting Started](#/guide/02_gettin-started) you've learned how to add a
translation table to your app, using `$translateProvider` method `translations()`.
The same method can be used to add more translation tables add a time. The given
translation tables just have to come with a language key with which
angular-translate is able to recognize, which translation table belongs to which
language.

Adding a translation table with a corresponding language key is very simple. Instead
of passing just the table as argument through `$translations()`, you can pass the
language key as first argument, whereas the translation table becomes the second
argument. So adding translation table with a language key looks something like this:

<pre>
// registers translation table with language key 'en'
$translateProvider.translations('en', {
  GREETING: 'Hello world!'
});
</pre>

Now, to add a second translation table for another language, let's say german, just
do the same with a different language key:

<pre>
// registers translation table with language key 'de'
$translateProvider.translations('de', {
  GREETING: 'Hallo Welt!'
});
</pre>

Is that simple? Your app now knows about two different languages. You can add
as many languages as needed, there's no limit. However, now since there are two
languages available, which language should be used by an app? angular-translate
doesn't prefer any language until you tell it to do so.

### Decide which language to use

Since you've now registered more then one translation table, `angular-translate`
has to know which one to use. This is where a new method of `$translateProvider`
comes in. `preferredLanguage()` tells angular-translate, which of the registered
languages is the one that should be used by default. It expects an argument with
the value of the language key, which points to a certain translation table. So,
to tell an app it should use german rather then english as first language, extend
the code like this:

<pre>
// tells angular-translate to use the german language
$translateProvider.preferredLanguage('de');
</pre>

**Note:** It's actually also possible to use `$translateProvider.uses()` for that,
since its setting the languages as well. However it turned out that this is a bad
practice when using asynchronous loaders in combination with a storage. In some
cases it can happen that angular-translate does two asynchronous calls. You'll
learn more on that in detail later. To get around this, we introduced
`preferredLanguage()`. You should always use `preferredLanguage()` instead of
`uses()` on `$translateProvider`.

### Using another language to fall back

This is all great but unfortunately the `preferredLanguage()` you just choose
is incomplete. So you would like `angular-translate` to try a second language
for these translations instead of displaying some empty or unformatted strings.
The new `fallbackLanguage()` feature will let you tell `angular-translate` do so.
which language to use in case it cannot find a translation in the currently
used translation table. Its usage is basically the same as `preferredLanguage()`.

<pre>
// tells angular-translate to use the english language if translations are not
// available in german
$translateProvider.fallbackLanguage('en');
</pre>

### Switching the language at runtime

To switch the language at runtime, `$translate` service has a method
`uses()` which either returns the language key of the current used language, or,
when passing a language key as argument, tells angular-translate to use the
corresponding language. `$translate.uses()` also invokes asynchronous laoders
internally, when trying to use a language of which the translation table isn't
loaded yet. But more on that in
[Asynchronous Loading](#/guide/08_asynchronous_loading).

A good usage of `$translate.uses()` would be in a controller which controls the
change of a language. You just have to implement a function on the scope to
expects a language key and then use it to tell angular-translate to change the
language.

<pre>
angular.module('myApp').controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

  $scope.changeLanguage = function (langKey) {
    $translate.uses(langKey);
  };

}]);
</pre>

To get a feeling for how it would work in a sample app, we update our app
accordingly. First, we add another translation table for the german language and
add two new translation id's for buttons we want to add later:

<pre>
var translationsEN = {
  HEADLINE: 'What an awesome module!',
  PARAGRAPH: 'Srsly!',
  PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
  PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
  PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!',
  VARIABLE_REPLACEMENT: 'Hi {{name}}',
  BUTTON_LANG_DE: 'german',
  BUTTON_LANG_EN: 'english'
};

var translationsDE= {
  HEADLINE: 'Was für ein großartiges Modul!',
  PARAGRAPH: 'Ernsthaft!',
  PASSED_AS_TEXT: 'Hey! Ich wurde als text übergeben!',
  PASSED_AS_ATTRIBUTE: 'Ich wurde als Attribut übergeben, cool oder?',
  PASSED_AS_INTERPOLATION: 'Anfänger! Ich bin interpoliert!',
  VARIABLE_REPLACEMENT: 'Hi {{name}}',
  BUTTON_LANG_DE: 'deutsch',
  BUTTON_LANG_EN: 'englisch'
};
</pre>

After that, we update the registration of the english translation table, that it
has a corresponding language key and tell angular-translate to use english as
default language:

<pre>
$translateProvider.translations('en', translationsEN);
$translateProvider.translations('de', translationsDE);
$translateProvider.preferredLanguage('en');
</pre>

Cool! Now we need controls to change the language at runtime. We update our HTML
and add a button for each language. We also setup an `ng-click` directive on each
button which calls a function to change the language:

<pre>
<button ng-click="changeLanguage('de')" translate="BUTTON_LANG_DE"></button>
<button ng-click="changeLanguage('en')" translate="BUTTON_LANG_EN"></button>
</pre>

Last but not least, we have to implement a corresponding function on our
controllers scope:

<pre>
app.controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

  $scope.changeLanguage = function (langKey) {
    $translate.uses(langKey);
  };
}]);
</pre>

Et vóila! We now have an app with multi language support!


<doc:example module="myApp">
  <doc:source>
    <script>
      var translationsEN = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!',
        PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
        PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
        PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!',
        VARIABLE_REPLACEMENT: 'Hi {{name}}',
        MISSING_TRANSLATION: 'Oops! I have not been translated into german...',
        BUTTON_LANG_DE: 'german',
        BUTTON_LANG_EN: 'english'
      };

      var translationsDE= {
        HEADLINE: 'Was für ein großartiges Modul!',
        PARAGRAPH: 'Ernsthaft!',
        PASSED_AS_TEXT: 'Hey! Ich wurde als text übergeben!',
        PASSED_AS_ATTRIBUTE: 'Ich wurde als Attribut übergeben, cool oder?',
        PASSED_AS_INTERPOLATION: 'Anfänger! Ich bin interpoliert!',
        VARIABLE_REPLACEMENT: 'Hi {{name}}',
        // MISSING_TRANSLATION is ... missing :)
        BUTTON_LANG_DE: 'deutsch',
        BUTTON_LANG_EN: 'englisch'
      };

      var app = angular.module('myApp', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation tables
        $translateProvider.translations('en', translationsEN);
        $translateProvider.translations('de', translationsDE);
        $translateProvider.preferredLanguage('en');
        $translateProvider.fallbackLanguage('en');
      }]);

      app.controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

        $scope.changeLanguage = function (langKey) {
          $translate.uses(langKey);
        };
      }]);
    </script>
    <div ng-controller="Ctrl">
      <h2>{{ 'HEADLINE' | translate }}</h2>
      <p>{{ 'PARAGRAPH' | translate }}</p>

      <p translate>PASSED_AS_TEXT</p>
      <p translate="PASSED_AS_ATTRIBUTE"></p>
      <p translate>{{ 'PASSED_AS_INTERPOLATION' }}</p>
      <p translate="{{ 'PASSED_AS_INTERPOLATION' }}"></p>
      <p translate="VARIABLE_REPLACEMENT" translate-values="{ name: 'PascalPrecht' }"></p>
      <p translate>MISSING_TRANSLATION</p>

      <button ng-click="changeLanguage('de')" translate="BUTTON_LANG_DE"></button>
      <button ng-click="changeLanguage('en')" translate="BUTTON_LANG_EN"></button>
    </div>
  </doc:source>
</doc:example>

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
