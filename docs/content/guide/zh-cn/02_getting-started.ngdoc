@ngdoc 概述
@name 入门
@description

# 入门

## 设置HTML
要开始使用，在你的HTML文档中嵌入angular-translate。当然，这应该发生
 Angular本身嵌入**后**. 您的HTML看起来应该像这样：

<pre>
<html>
  <head>
    <meta charset="utf-8">
    <title>i18n app</title>

    <script src="path/to/angular.js"></script>
    <script src="path/to/angular-translate.js"></script>
    <script src="app.js"></script>
  </head>

  <body ng-app="myApp">

  </body>
</html>
</pre>

## 声明依赖性
一旦做到这一点，你可以声明angular-translate为您的应用程序的依赖关系。
作为你的应用程序的依赖， Angular 提供依赖注入，这是很酷的. 所以要告诉你的应用程序它需要
angular-translate 才能够正常使用, 简单的注入
angular-translate 依赖性到你的组建之中就可以了，有下面的源代码所你演示。
这就给你引入angular-translate 的组件.

<pre>
var app = angular.module('myApp', ['pascalprecht.translate']);
</pre>你

## 介绍 `$translateProvider`

angular-translate 现在被我声明作为依赖, 这意味着我们现在可以访问 
其所有组件。Angular 是一个非常清晰的架构 
当涉及到不同的服务配置，你可能想在以后使用 
时配置你的应用程序。让我们来看看下面的代码

我敢肯定，你已经看过这样的代码：

<pre>
app.config(function ($locationProvider) {
  $locationProvider.html5Mode(true);
});
</pre>

Or maybe the configuration of a `$route` service:

<pre>
app.config(function ($routeProvider) {
  $routeProvider.when('/something', {
    templateUrl: 'url/to/template',
    controller: 'SomeFancyCtrl'
  });
});
</pre>

实际发生的事情在这里不是_use of a certain service_去配置 
一些东西。_configuration of a certain service_ 去使用_provider_,这恰好是你的应用程序以后要使用的。这意味着， 
`$locationProvider.html5Mode（true）配置`$location`**服务** 
在HTML5的模式下工作。所以，如果一个服务应该是从外部配置的， 
它需要一个相应的供应商，提供您所需要的接口。

angular-translate 安装包里有 `$translateProvider` ，它可以用来配置 `$translate`服务， 这个服务回处理i18n相关的内容。 
在你的应用程序中`$translate` 服务被我的指令和过滤器使用。要使用这个服务，他必须要知道什么翻译是可以拿到的。

这时候你就需要`$translateProvider`需要. `$translateProvider` 提供一些方法来教你的应用程序不同的语言，并且可以让`$translate`服务来使用他们。

## 教你的应用程序一个新的语言

用`$translateProvider`教你的应用程序一个新的语言是很容易的。首先，你 
必须将提供商注入你的模块配置功能（这是唯一可以访问他的地方)。
<pre>
app.config(['$translateProvider', function($translateProvider) {

}]);
</pre>

现在想要加一个新的语言，你必须让`$translateProvider`知道
**翻译列表**. 这是什么意思呢？其实非常简单。
angular-translate 期待一个翻译列表，他是一个JSON对象. 所以你只需要做的事，把翻译列表作为一个Javascript JSON 对象, 或者
作为JSON对象来远程加载。翻译列表的格式大概是这样的：

```json
{
  "TRANSLATION_ID": "This is a concrete translation for a specific language."
}
```

就那么容易吗？上面的转换表只包含一个翻译。正如你 
可以看到，键代表一个翻译的ID，而该值表示 
具体的翻译有一定的语言。你甚至不必
在你的翻译表中提供任何信息，何种语言它对应。关于此底下我们还会提到。 

您也可以通过命名空间内安排您的翻译。 
这是许多有趣的大网站对大和长的页面的做法。 
您需要做的就是创建嵌套的JSON对象：


```json
{
  "NAMESPACE": {
    "SUB_NAMESPACE": {
       "TRANSLATION_ID1": "This is a namespaced translation."
    }
  }
}
```

这个翻译列表只包含一个翻译。但是你可以很容易的扩展他。你可以有不同的嵌套的层次，在你的翻译列表中每一个命名空间都可以包括
更多的命名空间这可以使你的解决方案非常的灵活！

## 快捷方式和链接 
一个非常实用的功能就是可以自`1.1.1`版本以来对快捷方式和链接的使用。 
比方说，你有一个翻译表看起来像这样：

```json
{
  "bar": {
    "foo": {
      "foo": "This is my text."
    }
  }
}
```

您你后将可以通过`bar.foo.foo`来对现有的翻译ID进行访问的。 
所以虽然这样也不错，但我们可以做的更好。angular-translate很聪明 
它可以认识到，如果有翻译的id，具有相同标识符 
和其对应的命名空间。如果是这样的话，他就可以用快捷方式访问你这个翻译id 
指向的命名空间，而不是一个简单的快捷方式指向在一个命名空间内针对一个你你标识只会有一个相对应的你翻译我标识符。

这就意味着，你可以简单的使用快捷方式来访问同一个特定的翻译ID我。很酷对吧？

另一个很酷的功能，角翻译提供链接的能力将 
您的翻译表从一个翻译的id链接到另一个翻译的ID。比方说，我们有 
下列转换表：

```json
{
  "SOME_NAMESPACE": {
    "OK_TEXT": "OK"
  },
  "ANOTHER_NAMESPACE": {
    "OK_TEXT": "OK"
  }
}
```

So as you can see we have to introduced namespaces here, but both of them kind of need
a text that probably just says "OK". This case isn't unusual if you just think about
a confirmation button or similar in your app. However, it isn't hard to recognize
that we have a redundancy here and we as developers don't like redundancy right?



If there's a translation id that will always have the same concrete text as another
one you can just link to it. To link to another translation id, all you have to do
is to prefix its contents with an `@:` sign followed by the full name of the
translation id including the namespace you want to link to. So the example above
could look like this:

```json
{
  "SOME_NAMESPACE": {
    "OK_TEXT": "OK"
  },
  "ANOTHER_NAMESPACE": {
    "OK_TEXT": "@:SOME_NAMESPACE.OK_TEXT"
  }
}
```

## Aaaand action!

Let's add a translation table to our app. `$translateProvider` provides a
method called `translations()`, which takes care of that. Let's say we have a
translation table like this:

<pre>
var translations = {
  HEADLINE: 'What an awesome module!',
  PARAGRAPH: 'Srsly!',
  NAMESPACE: {
    PARAGRAPH: 'And it comes with awesome features!'
  }
};
</pre>

We can add this table with the use of `$translateProvider.translations()`:

<pre>
app.config(['$translateProvider', function ($translateProvider) {
  // add translation table
  $translateProvider
    .translations('en', translations)
    .preferredLanguage('en');
}]);
</pre>

This is basically all you have to do. Simply specify a language key and add a
translate table for it. After that tell angular-translate what the preferred
language is. Since we're adding the translation tables at configuration time,
`$translate` service is able to access it, once it is instantiated and used.
Here's the working code:

<doc:example module="myApp">
  <doc:source>
    <script>
      var translations = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!',
        NAMESPACE: {
          PARAGRAPH: 'And it comes with awesome features!'
        }
      };

      var app = angular.module('myApp', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation table
        $translateProvider
          .translations('en', translations)
          .preferredLanguage('en');
      }]);
    </script>
    <div>
      <h1>Nothing to see here yet!</h1>
      <p>But we'll change it now</p>
    </div>
  </doc:source>
</doc:example>

Your app is now ready to be localized! In the next chapter, you'll learn how to
use the provided directive and filter by angular-translate, to interpolate
your translations.

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
