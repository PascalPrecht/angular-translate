@ngdoc 概述
@name Using translate filter
@description

# Using translate filter

In [Using $translate service](#/guide/03_using-translate-service) you've learned
how to use `$translate` service to translate your contents with registered
translation IDs. Of course, it's pretty cool that this works, but you actually
don't want to bind your translation to hard to controllers or services. You mainly
want to translate your contents in the view layer because this is where it all
belongs to.

angular-translate provides a filter component with which you are able to translate
your translation IDs within the view layer, without letting any controller or
service know of them. This means, you can decouple the translate logic from any
controller or service an make your view layer replaceable without touching
business logic code.

## General usage
Using a filter in Angular is pretty straight forward. You can read everything about
Angular filters right
[here](http://docs.angularjs.org/guide/dev_guide.templates.filters.using_filters).

The same goes for angular-translate's `translate` filter. We can update our
example from
[Using $translate service](#/guide/03_using-translate-service#generalusage)
just by transfering the controller logic to our view layer. Basically the
`translate` filter works like this:

```
<ANY>{{ TRANSLATION_ID | translate }}</ANY>
```

So, to update our example, we remove the usage of `$translate` service within
our controller and add the logic to our view layer by using `translate` filter,
just like this:

<pre>
<h1>{{'HEADLINE' | translate}}</h1>
<p>{{'PARAGRAPH' | translate}}</p>
</pre>

Pretty easy ha? And of course, you can view a working sample here:

<doc:example module="myApp">
  <doc:source>
    <script>
      var translations = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!'
      };

      var app = angular.module('myApp', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation table
        $translateProvider.translations('en', translations);
        $translateProvider.preferredLanguage('en');
      }]);

      app.controller('Ctrl', ['$scope', function ($scope) {

      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'HEADLINE' | translate }}</p>
      <p>{{ 'PARAGRAPH' | translate }}</p>
    </div>
  </doc:source>
</doc:example>

太棒了！现在，您可以将您的内容的视图层内无翻译污染你的控制器逻辑与转换逻辑。
整个翻译东西是从你的业务逻辑分离，使您的应用程序更加灵活。
当它涉及到一个视图层更换！接下来的章节将告诉您如何用所提供的翻译``指示这样做。
<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
